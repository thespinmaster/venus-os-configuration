#!/usr/bin/python3 -u

# helper class for detecting an added usb serial device
# called durin installation from the ipk installer (CONTROL/postinst)

import os
import time
import sys
 

_dbus_message_path = None

def log(msg, dbusMsg = None, end='\n'):

    if _dbus_message_path:
        if dbusMsg is None:
            dbusMsg = msg

        command = f"dbus-send --system --print-reply --dest={_dbus_message_path} com.victronenergy.BusItem.SetValue variant:string:{dbusMsg}"

        os.popen(command).read()

    print(msg, end=end)
    
class _usb_serial_helper:

    SERIAL_STARTER_RULES_TEXT_MATCH='RUN+="/opt/victronenergy/serial-starter/cleanup.sh %k"'

    _serial_starter_rules_file=None
    _serial_starter_rule_file=None
    _service_name=None
    _serial_starter_config_mapping_name=None

    def parseArgs(self):
        
        if len(sys.argv) >= 5:
 
            self._serial_starter_rules_file = sys.argv[2]
            self._service_name = sys.argv[3]
            self._serial_starter_config_mapping_name = sys.argv[4]
            if len(sys.argv) >= 5:
                global _dbusMessagePath 
                _dbusMessagePath = sys.argv[5]

        else:
            log("Error invalid arguments passed. Requires:\narg 1 (string): The path to the serial-starter.rules file\narg 2 (string): The path to store the rule to be added to or removed from the serial-starter.rules file.\narg 3 (string): The ve service environment name.\narg 4 (string) The dbus path to optionaly send messages to. Can be an empty string if not using dbus")
            exit(1)

        from pathlib import Path
        #change path from //usr/lib/opkg/info/test-service.install-helper
        #to               //usr/lib/opkg/info/test-service.serial-starter.rule
        log("__file__:" + __file__)
        log("dirname:" + os.path.dirname(__file__))

        p = Path(__file__)
        #filename.with_suffix('')
        #ilename.with_suffix('.serial-starter')
        #filename.with_suffix('.rule')
 
        self._serial_starter_rule_file= str(p.rename(p.with_suffix('.serial-starter'))) + ".rule"
 
        log("_serial_starter_rule_file:" + self._serial_starter_rule_file)

    def executeAction(self, action):

        test_rule_file = self._serial_starter_rule_file + ".test"
        log(f"test_rule_rule: {test_rule_file}")
        if (action == "detect" or action == "detect_add"): 

            if os.path.exists(test_rule_file):

                log("detecting usb using test file...")
                log(f'cp {test_rule_file} {self._serial_starter_rule_file}')
                os.popen(f'cp {test_rule_file} {self._serial_starter_rule_file}').read()
                log("Usb device found")

            elif (not self._create_serial_starter_rule()):

                    log(f"Usb device not found. Please manualy update {self._serial_starter_rule_file}")
                    exit(1) 

        if (action == "add" or action == "detect_add" ):

            if self._add_rule_to_serial_starter_rules_file():
                exit(0)
            else:
                log(f"Cound not update {self._serial_starter_rules_file}. Please manualy update")
                
        elif (action == "remove" ):

            if self._remove_rule_from_serial_starter_rules_file():
                exit(0)
            else:
                log(f"Warning: Could not remove rule from {self._serial_starter_rules_file}. Please manualy update")

        exit(1)
    
    def _create_serial_starter_rule(self):
    
        new_device = self._detect_inserted_serial_usb_device()
        if (new_device is None):
            log("No new USB device found.")
            return False
    
        log(f"Found new USB device: {new_device}")
        
        # Extract the bus and device number from the line
        parts = new_device.split()
        bus = parts[1]
        device = parts[3][:-1]  # Remove the trailing ':'

        command = f"lsusb -v -s {bus}:{device} | grep -e 'idVendor' -e 'idProduct' -e 'iSerial'"
        usb_info_lines = os.popen(command).read().strip().splitlines()

        vendor_id = usb_info_lines[0].strip().split()[1]
        product_id = usb_info_lines[1].strip().split()[1]
        serial_id = usb_info_lines[2].strip().split()[2]
        if (serial_id == None):
            log("No serial ID found for the device.")
            return False

        usb_rule = f"# {self._service_name}\n"
        usb_rule += f'ACTION=="add", ENV{{ID_BUS}}=="usb", ENV{{ID_VENDOR_ID}}=="{vendor_id}", ENV{{ID_MODEL_ID}}=="{product_id}", ENV{{ID_SERIAL_SHORT}}=="{serial_id}", ENV{{VE_SERVICE}}="{self._serial_starter_config_mapping_name}"'
    
        # save the rule to a file. which is used to add and uninstall the value
    
        with open(self._serial_starter_rule_file, 'w') as file:
            file.write(usb_rule)
    
        return True

    def _detect_inserted_serial_usb_device(self):
    
        counter = 0
        timeout_counter = 0

        progress_header_msg = "Please connect the serial device (or remove and reconnect it) to the USB port."
        log(progress_header_msg)
        log("Waiting for USB device to be connected...")
    
        before_usb_devices = os.popen("lsusb").read().strip().splitlines() 
        while True:
            # Wait for the device to be connected 
            time.sleep(1)
            after_usb_devices = os.popen("lsusb").read().strip().splitlines() 
    
            if len(after_usb_devices) == (len(before_usb_devices) + 1):
                for line in after_usb_devices:
                    if line not in before_usb_devices:
                        return line
                break
            else:
                before_usb_devices = after_usb_devices

            counter += 1
            if counter > 3: counter = 1

            timeout_counter += 1
            if timeout_counter > 60: 
                log("Timeout, exiting...")
                return ""

            update_msg = f"No new USB device detected, retrying{'.' * counter}  "
    
            log(update_msg, f"{progress_header_msg}\n{update_msg}", end='\r') #end just for terminal output
    


    def _remove_string_with_newline_variants(self, source, string_to_remove):

        source_len = len(source)
        source = source.replace("\n" + string_to_remove + "\n", "")

        if (len(source) < source_len):
            return source
        source = source.replace("\n" + string_to_remove, "")
        if (len(source) < source_len):
            return source
        source = source.replace(string_to_remove + "\n", "")
        if (len(source) < source_len):
            return source
        source = source.replace(string_to_remove, "")
        if (len(source) < source_len):
            return source
        
        return source

    def _do_serial_starter_rule_files_exist(self):
        
        if not os.path.exists(self._serial_starter_rules_file):
            log(f"Error: {self._serial_starter_rules_file} does not exist.")
            return False

        if not os.path.exists(self._serial_starter_rule_file):
            log(f"Error: {self._serial_starter_rule_file} does not exist.")
            return False

        return True

    def _add_rule_to_serial_starter_rules_file(self):
    
        if (not self._do_serial_starter_rule_files_exist()):
            return False
            
        with open(self._serial_starter_rules_file, 'r') as file:
            rules = file.readlines()

        with open(self._serial_starter_rule_file, 'r') as file:
            rule = file.read()

        # Check if the rule already exists (for multi-line, check if all lines are present in order)
        rule_lines = [line.rstrip('\n') for line in rule.splitlines() if line.strip()]
        rules_str = ''.join([line.rstrip('\n') for line in rules])
    
        # Check if the rule already exists
        for line in rules:
            if rule in line:
                log("Rule already exists in the file.")
                return True

        # Add the new rule before the placeholder
        log("Adding new rule to serial starter rules file...")
        found = False
    
        for i, line in enumerate(rules):
            line = line.strip()
            if line.endswith(self.SERIAL_STARTER_RULES_TEXT_MATCH):
                rules.insert(i+1, "\n" + rule + "\n")
                found = True
                break
    
        if not found:
            return False
        
        with open(self._serial_starter_rules_file, 'w') as file:
            file.writelines(rules)

        log("Rule added successfully.")
        return True
    
    def _remove_rule_from_serial_starter_rules_file(self):

        if (not self._do_serial_starter_rule_files_exist()):
            return False
            
        with open(self._serial_starter_rules_file, 'r') as file:
            rules = file.read()

        with open(self._serial_starter_rule_file, 'r') as file:
            rule = file.read()

        rules_len = len(rules)  
        rules = self._remove_string_with_newline_variants(rules, rule)
        if (len(rules) < rules_len):
            with open(self._serial_starter_rules_file, 'w') as file:
                file.write(rules)
                log(f"successfully removed rule from {self._serial_starter_rules_file}")
        else:
            log(f"warning rule not removed rule from {self._serial_starter_rules_file}")

        return True


if __name__ == "__main__":

    print(sys.argv)
    actions =sys.argv[1].split('.')
    match actions[0]:
        case "usb-serial-helper":
            usbsh = _usb_serial_helper()
            usbsh.parseArgs()
            usbsh.executeAction(actions[1])
        case "":
            pass
