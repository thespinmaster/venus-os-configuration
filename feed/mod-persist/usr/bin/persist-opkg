#!/bin/bash
# Mod persist opkg util script.
# Allow users to persists feeds and packages across reboots, unexpected removals, resets, destructive firmware updates, ...

help() {
  echo "Usage: persist-opkg command [arguments...]"
  echo ""
  echo "Where command is one of:"
  echo "  list : list persisted feeds and packages"
  echo "  install <pkgs> : persist <pkgs> and install it/them if needed"
  echo "  remove <pkgs> : unpersist <pkgs> and uninstall it/them if needed"
  echo "  status <pkgs> : show <pkgs> availability, persistence and installation status"
  echo "  apply : check and reinstall persisted packages if needed"
  echo "  install-feed <name> <url> : add <name> to the list of persisted feeds"
  echo "  remove-feed <name> : remove <name> from the list of persisted feeds"
  echo "  help : show this help"
}

error() {
  case $1 in
    0)
    ;;
    1)
      echo "An unknown error occured." >&2
      help
      exit 1
    ;;
    2)
      echo "Unknown command: $2" >&2
      help
      exit 2
    ;;
    3)
      echo "Missing <pkgs> argument." >&2
      help
      exit 3
    ;;
    4)
      echo "Package not found: $2" >&2
      echo "Please check package name with 'opkg find' command and feeds configuration if needed."
      exit 4
    ;;
    5)
      echo "Package not found in persisted list: $2" >&2
      exit 5
    ;;
    6)
      echo "Missing <name> and/or <url> arguments." >&2
      exit 6
    ;;
    7)
      echo "Feed not found in persisted list: $2" >&2
      exit 7
    ;;
    *)
      echo "Error: Unknown error code $1" >&2
      exit $1
    ;;
  esac
}

PERSISTED_PKGS_LIST_PATH="/data/etc/mod-persist/persisted_opkg_pkgs.conf"
PERSISTED_FEEDS_LIST_PATH="/data/etc/mod-persist/persisted_opkg_feeds.conf"

# Load opkg list result
AVAILABLE_PKGS=""
opkg_list_loader() {
  if [ -z "$AVAILABLE_PKGS" ]; then
    AVAILABLE_PKGS=$(opkg list | cut -d ' ' -f 1)
  fi
}

# Load opkg list result
INSTALLED_PKGS=""
opkg_list_installed_loader() {
  if [ -z "$INSTALLED_PKGS" ]; then
    INSTALLED_PKGS=$(opkg list-installed | cut -d ' ' -f 1)
  fi
}

# Function to parse command argument's package names
parse_pkgs() {
  shift
  if [ "$#" -eq 0 ]; then
    error 3
  fi
  local pkgs=()
  for pkg in "$@"; do
    if [[ $pkg =~ ^[a-zA-Z0-9._-]+$ ]]; then
      pkgs+=("$pkg")
    else
      error 4 "$pkg"
    fi
  done
  echo "${pkgs[@]}"
}

# Check if package exists
check_pkg_availability() {
  local pkg="$1"
  opkg_list_loader
  
  if ! echo "$AVAILABLE_PKGS" | grep -q "^$pkg$"; then
    error 4 "$pkg"
  fi
}

# Add a single package to the persisted list
persist() {
  local pkg="$1"
  
  # Add the package to the persisted list if it is not already there
  if ! grep -q "^$pkg$" "$PERSISTED_PKGS_LIST_PATH"; then
    check_pkg_availability "$pkg"
    echo "$pkg" >> "$PERSISTED_PKGS_LIST_PATH"
  fi
  status "$pkg"
}

# Remove a single package from the persisted list
unpersist() {
  local pkg="$1"
  
  # Check if package is persisted
  if ! grep -q "^$pkg$" "$PERSISTED_PKGS_LIST_PATH"; then
    error 5 "$pkg"
  fi
  
  sed -i "/^$pkg$/d" "$PERSISTED_PKGS_LIST_PATH"
  status "$pkg"
}

# Install a single package
install() {
  local pkg="$1"
  opkg_list_installed_loader
  
  # Install the package if it is not already installed
  if ! echo "$INSTALLED_PKGS" | grep -q "^$pkg$"; then
    echo "Installing package: $pkg"
    opkg install "$pkg"
    ret=$?
    if [ $ret -ne 0 ]; then
      echo "Failed to install package: $pkg" >&2
      exit $ret
    fi
  else
    echo "Package already installed: $pkg"
  fi
}

# Remove a single package
remove() {
  local pkg="$1"
  opkg_list_installed_loader
  
  # Remove the package if it is installed
  if echo "$INSTALLED_PKGS" | grep -q "^$pkg$"; then
    echo "Removing package: $pkg"
    opkg remove "$pkg"
    ret=$?
    if [ $ret -ne 0 ]; then
      echo "Failed to remove package: $pkg" >&2
      exit $ret
    fi
  else
    echo "Package not installed: $pkg"
  fi
}

# Show status of a single package
status() {
  local pkg="$1"
  opkg_list_loader
  opkg_list_installed_loader
  
  echo -n "$pkg : "
  
  # Check if the package is available
  if ! echo "$AVAILABLE_PKGS" | grep -q "^$pkg$"; then
    echo -n "unavailable "
  else
    echo -n "available "
  fi
  
  # Check if the package is persisted
  if grep -q "^$pkg$" "$PERSISTED_PKGS_LIST_PATH"; then
    echo -n "persisted "
  else
    echo -n "unpersisted "
  fi
  
  # Check if the package is installed
  if echo "$INSTALLED_PKGS"  | grep -q "^$pkg$"; then
    echo "installed"
  else
    echo "uninstalled"
  fi
}

# For every persisted package, check if it is installed and install it if needed
apply() {
  opkg_list_installed_loader
  return_code=0
  
  for pkg in $(cat "$PERSISTED_PKGS_LIST_PATH"); do
    if ! echo "$INSTALLED_PKGS" | grep -q "^$pkg$"; then
      echo "Installing persisted package: $pkg"
      opkg install "$pkg"
      ret=$?
      if [ $ret -ne 0 ]; then
        echo "Failed to install package: $pkg" >&2
        return_code=$ret
      fi
    else
      echo "Package already installed: $pkg"
    fi
  done
  
  return "$return_code"
}

install_feed() {
  local name="$1"
  local url="$2"
  
  # Check if feed is already persisted
  if ! grep -q " $name " "$PERSISTED_FEEDS_LIST_PATH"; then
    echo "Persisting feed: $name"
    echo "src/gz $name $url" >> "$PERSISTED_FEEDS_LIST_PATH"
  else
    echo "Feed already persisted: $name"
  fi
}

remove_feed() {
  local name="$1"
  
  # Check if feed is persisted
  if grep -q " $name " "$PERSISTED_FEEDS_LIST_PATH"; then
    echo "Unpersisting feed: $name"
    sed -i "/^.* $name .*$/d" "$PERSISTED_FEEDS_LIST_PATH"
  else
    error 7 "$name"
  fi
}

case "$1" in
  list)
    echo "Persisted feeds:"
    cat "$PERSISTED_FEEDS_LIST_PATH"
    echo ""
    echo "Persisted packages:"
    cat "$PERSISTED_PKGS_LIST_PATH"
  ;;
  
  install)
    pkgs=$(parse_pkgs "$@") || exit $?
    for pkg in $pkgs; do
      persist "$pkg"
      install "$pkg"
    done
  ;;
  
  remove)
    pkgs=$(parse_pkgs "$@") || exit $?
    for pkg in $pkgs; do
      remove "$pkg"
      unpersist "$pkg"
    done
  ;;
  
  status)
    pkgs=$(parse_pkgs "$@") || exit $?
    for pkg in $pkgs; do
      status "$pkg"
    done
  ;;
  
  apply)
    apply
    exit $?
  ;;
  
  install-feed)
    if [ "$#" -ne 3 ]; then
      error 6
    fi
    install_feed $2 $3
  ;;
  
  remove-feed)
    if [ "$#" -ne 2 ]; then
      error 6
    fi
    remove_feed $2
  ;;
  
  help)
    help
    exit 0
  ;;
  
  *)
    error 2 "$(basename $0) $@"
  ;;
esac
